# This is a basic workflow to help you get started with Actions

name: ThingsLink MT7688 SOC Firmware Build

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Update feeds & install
      - name: Feeds Update
        run: ./scripts/feeds update -a
        
      # Update feeds  
      - name: Feeds Install
        run: ./scripts/feeds install -a
     
      # Copy configuration
      - name: Configuration Copy C1
        run: cp .config_tlink_c1 .config

      # Copy configuration
      - name: Make C1 Firmware
        run: make -j8 V=s

      # Copy configuration
      - name: Configuration Copy C2
        run: cp .config_tlink_c2 .config

      # Copy configuration
      - name: Make C2 Firmware
        run: make -j8

      # Copy configuration
      - name: Configuration Copy C2_16M
        run: cp .config_tlink_c2_16m .config

      # Copy configuration
      - name: Make C2_16M Firmware
        run: make -j8

      # Copy configuration
      - name: Configuration Copy C3
        run: cp .config_tlink_c3 .config

      # Copy configuration
      - name: Make C3 Firmware
        run: make -j8

      # Copy configuration
      - name: Configuration Copy C35
        run: cp .config_tlink_c35 .config

      # Copy configuration
      - name: Make C35 Firmware
        run: make -j8

      # Copy configuration
      - name: Configuration Copy Widora BIT5.1
        run: cp .config_widora_32m .config

      # Copy configuration
      - name: Make Widora BIT5.1 Firmware
        run: make -j8

      # Remove unless files
      - name: Cleanup before release files
        run: |
          rm -rf bin/packages/mipsel_24kc/base
          rm -rf bin/packages/mipsel_24kc/freifunk
          rm -rf bin/packages/mipsel_24kc/luci
          rm -rf bin/packages/mipsel_24kc/packages
          rm -rf bin/packages/mipsel_24kc/routing
          rm -rf bin/packages/mipsel_24kc/telephony
          rm -f bin/targets/ramips/mt76x8/*initramfs-kernel.bin
          rm -f bin/targets/ramips/mt76x8/openwrt-toolchain*

      - name: Compress files
        run: cd bin && tar czvf ../release.tar.gz * > /dev/null

      - name: Upload To Github Release
        # You may pin to the exact commit or the version.
        # uses: xresloader/upload-to-github-release@92f709ea49b05d55349e9c269754bea46887dc8f
        uses: xresloader/upload-to-github-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # The files or file patterns to upload. You can upload multiple files by split them by semicolon. You can use the glob pattern to find the files.
          file: "release.tar.gz"
          # If you need to overwrite existing files, add overwrite: true to the with.
          overwrite: true
          # The resultant deployment is a draft Release that only repository collaborators can see. This gives you an opportunity to examine and edit the draft release.
          draft: true
          # The resultant deployment is a Prerelease. This gives you an opportunity to examine and edit the prerelease.
          prerelease: false
          # With tags: true, your Releases deployment will trigger if and only if the build is a tagged build.
          tags: false
          # Only work on these branches(splited by semicolon), set to nothing to accept all branches.
          branches: master
          # With verbose: true, be verbose.
          verbose: false
          # Set custom tag name.
          tag_name: ThingLink_MT7688-${{ github.run_number }}
          # If try to update latest release.
          update_latest_release: true
