--- a/src/stdio/fclose.c
+++ b/src/stdio/fclose.c
@@ -7,26 +7,32 @@
 int fclose(FILE *f)
 {
 	int r;
-	int perm;
 	
 	FLOCK(f);
+	r = fflush(f);
+	r |= f->close(f);
+	FUNLOCK(f);
 
-	__unlist_locked_file(f);
+	/* Past this point, f is closed and any further explict access
+	 * to it is undefined. However, it still exists as an entry in
+	 * the open file list and possibly in the thread's locked files
+	 * list, if it was closed while explicitly locked. Functions
+	 * which process these lists must tolerate dead FILE objects
+	 * (which necessarily have inactive buffer pointers) without
+	 * producing any side effects. */
 
-	if (!(perm = f->flags & F_PERM)) {
-		FILE **head = __ofl_lock();
-		if (f->prev) f->prev->next = f->next;
-		if (f->next) f->next->prev = f->prev;
-		if (*head == f) *head = f->next;
-		__ofl_unlock();
-	}
+	if (f->flags & F_PERM) return r;
 
-	r = fflush(f);
-	r |= f->close(f);
+	__unlist_locked_file(f);
+
+	FILE **head = __ofl_lock();
+	if (f->prev) f->prev->next = f->next;
+	if (f->next) f->next->prev = f->prev;
+	if (*head == f) *head = f->next;
+	__ofl_unlock();
 
 	if (f->getln_buf) free(f->getln_buf);
-	if (!perm) free(f);
-	else FUNLOCK(f);
+	free(f);
 
 	return r;
 
