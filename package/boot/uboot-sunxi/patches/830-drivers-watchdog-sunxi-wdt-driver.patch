--- a/drivers/watchdog/Kconfig
+++ b/drivers/watchdog/Kconfig
@@ -177,6 +177,14 @@
 	  Enable the STM32 watchdog (IWDG) driver. Enable support to
 	  configure STM32's on-SoC watchdog.
 
+config WDT_SUNXI
+	bool "SunXi watchdog timer support"
+	depends on WDT && ARCH_SUNXI
+	help
+	  Select this to enable watchdog timer for SunXi SoCs.
+	  The watchdog timer is stopped when initialized.
+	  It performs full SoC reset.
+
 config XILINX_TB_WATCHDOG
 	bool "Xilinx Axi watchdog timer support"
 	depends on WDT
--- a/drivers/watchdog/Makefile
+++ b/drivers/watchdog/Makefile
@@ -29,4 +29,5 @@
 obj-$(CONFIG_WDT_OMAP3) += omap_wdt.o
 obj-$(CONFIG_WDT_SP805) += sp805_wdt.o
 obj-$(CONFIG_WDT_STM32MP) += stm32mp_wdt.o
+obj-$(CONFIG_WDT_SUNXI) += sunxi_wdt.o
 obj-$(CONFIG_WDT_TANGIER) += tangier_wdt.o
--- /dev/null
+++ b/drivers/watchdog/sunxi_wdt.c
@@ -0,0 +1,204 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ *      sunxi Watchdog Driver
+ *      Copyright (c) 2022 Dirk Chang
+ */
+
+#include <clk.h>
+#include <common.h>
+#include <dm.h>
+#include <reset.h>
+#include <wdt.h>
+#include <asm/io.h>
+#include <asm/utils.h>
+
+#define WDT_MAX_TIMEOUT         16
+#define WDT_MIN_TIMEOUT         1
+#define WDT_TIMEOUT_MASK        0x0F
+
+#define WDT_CTRL_RELOAD         ((1 << 0) | (0x0a57 << 1))
+
+#define WDT_MODE_EN             (1 << 0)
+
+#define DRV_NAME		"sunxi-wdt"
+#define DRV_VERSION		"1.0"
+
+/*
+ * This structure stores the register offsets for different variants
+ * of Allwinner's watchdog hardware.
+ */
+struct sunxi_wdt_reg {
+	u8 wdt_ctrl;
+	u8 wdt_cfg;
+	u8 wdt_mode;
+	u8 wdt_timeout_shift;
+	u8 wdt_reset_mask;
+	u8 wdt_reset_val;
+};
+
+struct sunxi_wdt_dev {
+	void __iomem *wdt_base;
+	const struct sunxi_wdt_reg *wdt_regs;
+};
+
+/*
+ * wdt_timeout_map maps the watchdog timer interval value in seconds to
+ * the value of the register WDT_MODE at bits .wdt_timeout_shift ~ +3
+ *
+ * [timeout seconds] = register value
+ *
+ */
+
+static const int wdt_timeout_map[] = {
+	[1] = 0x1,  /* 1s  */
+	[2] = 0x2,  /* 2s  */
+	[3] = 0x3,  /* 3s  */
+	[4] = 0x4,  /* 4s  */
+	[5] = 0x5,  /* 5s  */
+	[6] = 0x6,  /* 6s  */
+	[8] = 0x7,  /* 8s  */
+	[10] = 0x8, /* 10s */
+	[12] = 0x9, /* 12s */
+	[14] = 0xA, /* 14s */
+	[16] = 0xB, /* 16s */
+};
+
+
+static int sunxi_wdt_reset(struct udevice *wdt_dev)
+{
+	struct sunxi_wdt_dev *sunxi_wdt = dev_get_priv(wdt_dev);
+	void __iomem *wdt_base = sunxi_wdt->wdt_base;
+	const struct sunxi_wdt_reg *regs = sunxi_wdt->wdt_regs;
+
+	writel(WDT_CTRL_RELOAD, wdt_base + regs->wdt_ctrl);
+
+	return 0;
+}
+
+static int sunxi_wdt_set_timeout(struct udevice *wdt_dev,
+		u64 timeout_ms)
+{
+	struct sunxi_wdt_dev *sunxi_wdt = dev_get_priv(wdt_dev);
+	void __iomem *wdt_base = sunxi_wdt->wdt_base;
+	const struct sunxi_wdt_reg *regs = sunxi_wdt->wdt_regs;
+	u32 reg;
+	u32 timeout;
+
+	timeout = (u32)timeout_ms + 999 / 1000;
+	if (timeout > WDT_MAX_TIMEOUT)
+		timeout = WDT_MAX_TIMEOUT;
+
+	if (wdt_timeout_map[timeout] == 0)
+		timeout++;
+
+	reg = readl(wdt_base + regs->wdt_mode);
+	reg &= ~(WDT_TIMEOUT_MASK << regs->wdt_timeout_shift);
+	reg |= wdt_timeout_map[timeout] << regs->wdt_timeout_shift;
+	writel(reg, wdt_base + regs->wdt_mode);
+
+	sunxi_wdt_reset(wdt_dev);
+
+	return 0;
+}
+
+static int sunxi_wdt_stop(struct udevice *wdt_dev)
+{
+	struct sunxi_wdt_dev *sunxi_wdt = dev_get_priv(wdt_dev);
+	void __iomem *wdt_base = sunxi_wdt->wdt_base;
+	const struct sunxi_wdt_reg *regs = sunxi_wdt->wdt_regs;
+
+	writel(0, wdt_base + regs->wdt_mode);
+
+	return 0;
+}
+
+static int sunxi_wdt_start(struct udevice *wdt_dev, u64 timeout_ms, ulong flags)
+{
+	struct sunxi_wdt_dev *sunxi_wdt = dev_get_priv(wdt_dev);
+	void __iomem *wdt_base = sunxi_wdt->wdt_base;
+	const struct sunxi_wdt_reg *regs = sunxi_wdt->wdt_regs;
+	u32 reg;
+	int ret;
+
+	ret = sunxi_wdt_set_timeout(wdt_dev, timeout_ms);
+	if (ret < 0)
+		return ret;
+
+	/* Set system reset function */
+	reg = readl(wdt_base + regs->wdt_cfg);
+	reg &= ~(regs->wdt_reset_mask);
+	reg |= regs->wdt_reset_val;
+	writel(reg, wdt_base + regs->wdt_cfg);
+
+	/* Enable watchdog */
+	reg = readl(wdt_base + regs->wdt_mode);
+	reg |= WDT_MODE_EN;
+	writel(reg, wdt_base + regs->wdt_mode);
+
+	return 0;
+}
+
+static const struct wdt_ops sunxi_wdt_ops = {
+	.start		= sunxi_wdt_start,
+	.stop		= sunxi_wdt_stop,
+	.reset		= sunxi_wdt_reset,
+};
+
+static const struct sunxi_wdt_reg sun4i_wdt_reg = {
+	.wdt_ctrl = 0x00,
+	.wdt_cfg = 0x04,
+	.wdt_mode = 0x04,
+	.wdt_timeout_shift = 3,
+	.wdt_reset_mask = 0x02,
+	.wdt_reset_val = 0x02,
+};
+
+static const struct sunxi_wdt_reg sun6i_wdt_reg = {
+	.wdt_ctrl = 0x10,
+	.wdt_cfg = 0x14,
+	.wdt_mode = 0x18,
+	.wdt_timeout_shift = 4,
+	.wdt_reset_mask = 0x03,
+	.wdt_reset_val = 0x01,
+};
+
+static const struct udevice_id sunxi_wdt_dt_ids[] = {
+	{ .compatible = "allwinner,sun4i-a10-wdt", .data = (ulong)&sun4i_wdt_reg },
+	{ .compatible = "allwinner,sun6i-a31-wdt", .data = (ulong)&sun6i_wdt_reg },
+	{ /* sentinel */ }
+};
+
+static int sunxi_wdt_probe(struct udevice *wdt_dev)
+{
+	struct sunxi_wdt_dev *sunxi_wdt = dev_get_priv(wdt_dev);
+
+	printf("%s: start...\n", __func__);
+
+	sunxi_wdt->wdt_regs = (struct sunxi_wdt_reg*)dev_get_driver_data(wdt_dev);
+	if (!sunxi_wdt->wdt_regs)
+		return -ENODEV;
+
+	sunxi_wdt->wdt_base = dev_remap_addr(wdt_dev);
+	if (!sunxi_wdt->wdt_base)
+		return -EINVAL;
+
+	sunxi_wdt_stop(wdt_dev);
+
+	if (dev_read_bool(wdt_dev, "sunxi,start-on-init")) {
+		printf("Watchdog started on init!!!\n");
+		sunxi_wdt_start(wdt_dev, WDT_MAX_TIMEOUT * 1000, 0);
+	} else {
+		printf("Watchdog init stopped!\n");
+	}
+	return 0;
+}
+
+U_BOOT_DRIVER(sunxi_wdt) = {
+	.name = "sunxi_wdt",
+	.id = UCLASS_WDT,
+	.of_match = sunxi_wdt_dt_ids,
+	.priv_auto_alloc_size = sizeof(struct sunxi_wdt_dev),
+	.probe = sunxi_wdt_probe,
+	.ops = &sunxi_wdt_ops,
+	.flags = DM_FLAG_PRE_RELOC,
+};
