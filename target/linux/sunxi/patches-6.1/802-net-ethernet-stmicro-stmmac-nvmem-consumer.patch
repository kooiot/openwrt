967142cf31f8b20eeec2d5633eeb29ad9104c4ccommit 967142cf31f8b20eeec2d5633eeb29ad9104c4c3
Author: Roman Ber√°nek <roman.beranek@prusa3d.com>
Date:   Fri Nov 16 02:19:25 2018 +0100

    net: stmmac: enable MAC address to be read from a nvmem cell as is described in Documentation/devicetree/bindings/net/ethernet.txt

diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_platform.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_platform.c
index 72da77b94ecd..8a7b804528ef 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_platform.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_platform.c
@@ -15,6 +15,7 @@
 #include <linux/of_net.h>
 #include <linux/of_device.h>
 #include <linux/of_mdio.h>
+#include <linux/nvmem-consumer.h>
 
 #include "stmmac.h"
 #include "stmmac_platform.h"
@@ -385,6 +386,22 @@
 	return -ENODEV;
 }
 
+static void *stmmac_get_nvmem_address(struct device *dev)
+{
+	struct nvmem_cell *cell;
+	size_t cell_size;
+	char *mac;
+
+	cell = nvmem_cell_get(dev, "mac-address");
+	if (IS_ERR(cell))
+		return NULL;
+
+	mac = nvmem_cell_read(cell, &cell_size);
+	nvmem_cell_put(cell);
+
+	return mac;
+}
+
 /**
  * stmmac_probe_config_dt - parse device-tree driver parameters
  * @pdev: platform_device structure
@@ -401,11 +418,16 @@
 	struct stmmac_dma_cfg *dma_cfg;
 	int phy_mode;
 	int rc;
+	const u8 *mac_addr;
 
 	plat = devm_kzalloc(&pdev->dev, sizeof(*plat), GFP_KERNEL);
 	if (!plat)
 		return ERR_PTR(-ENOMEM);
 
+	/* U-boot passes a MAC address it found/generated for the
+	   interface as a "local-mac-address" attribute in the dt
+	   node. Here it is received.
+	*/
 	rc = of_get_mac_address(np, mac);
 	if (rc) {
 		if (rc == -EPROBE_DEFER)
@@ -414,6 +436,10 @@
 		eth_zero_addr(mac);
 	}
 
+	mac_addr = stmmac_get_nvmem_address(&pdev->dev);
+	if (mac_addr && is_valid_ether_addr(mac_addr))
+		ether_addr_copy(mac, mac_addr);
+
 	phy_mode = device_get_phy_mode(&pdev->dev);
 	if (phy_mode < 0)
 		return ERR_PTR(phy_mode);
