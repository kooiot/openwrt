--- a/drivers/net/mdio/mdio-sun4i.c	2021-12-22 10:49:37.392034969 +0800
+++ b/drivers/net/mdio/mdio-sun4i.c	2021-12-22 10:49:58.034087952 +0800
@@ -18,6 +18,7 @@
 #include <linux/phy.h>
 #include <linux/platform_device.h>
 #include <linux/regulator/consumer.h>
+#include <linux/gpio/consumer.h>
 
 #define EMAC_MAC_MCMD_REG	(0x00)
 #define EMAC_MAC_MADR_REG	(0x04)
@@ -31,6 +32,7 @@
 struct sun4i_mdio_data {
 	void __iomem		*membase;
 	struct regulator	*regulator;
+	struct device		*dev;
 };
 
 static int sun4i_mdio_read(struct mii_bus *bus, int mii_id, int regnum)
@@ -87,6 +89,47 @@
 	return 0;
 }
 
+/**
+ * sun4i_mdio_reset
+ * @bus: points to the mii_bus structure
+ * Description: reset the MII bus
+ */
+int sun4i_mdio_reset(struct mii_bus *bus)
+{
+	struct sun4i_mdio_data *data = bus->priv;
+
+#ifdef CONFIG_OF
+	if (data->dev && data->dev->of_node) {
+		struct gpio_desc *reset_gpio;
+		u32 delays[3] = { 0, 0, 0 };
+
+		pr_info("%s: reset: %pOF\n", __func__, data->dev->of_node);
+		reset_gpio = devm_gpiod_get_optional(data->dev,
+						     "snps,reset",
+						     GPIOD_OUT_LOW);
+		if (IS_ERR(reset_gpio))
+			return PTR_ERR(reset_gpio);
+
+		device_property_read_u32_array(data->dev,
+					       "snps,reset-delays-us",
+					       delays, ARRAY_SIZE(delays));
+
+		pr_info("%s: reset delays: %d %d %d\n", __func__, delays[0], delays[1], delays[2]);
+		if (delays[0])
+			msleep(DIV_ROUND_UP(delays[0], 1000));
+
+		gpiod_set_value_cansleep(reset_gpio, 1);
+		if (delays[1])
+			msleep(DIV_ROUND_UP(delays[1], 1000));
+
+		gpiod_set_value_cansleep(reset_gpio, 0);
+		if (delays[2])
+			msleep(DIV_ROUND_UP(delays[2], 1000));
+	}
+#endif
+	return 0;
+}
+
 static int sun4i_mdio_probe(struct platform_device *pdev)
 {
 	struct device_node *np = pdev->dev.of_node;
@@ -105,6 +148,7 @@
 	bus->parent = &pdev->dev;
 
 	data = bus->priv;
+	data->dev = &pdev->dev;
 	data->membase = devm_platform_ioremap_resource(pdev, 0);
 	if (IS_ERR(data->membase)) {
 		ret = PTR_ERR(data->membase);
@@ -126,6 +170,8 @@
 			goto err_out_free_mdiobus;
 	}
 
+	// bus->reset = sun4i_mdio_reset;
+
 	ret = of_mdiobus_register(bus, np);
 	if (ret < 0)
 		goto err_out_disable_regulator;
