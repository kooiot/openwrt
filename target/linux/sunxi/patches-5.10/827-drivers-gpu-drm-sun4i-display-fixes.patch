--- a/drivers/gpu/drm/sun4i/sun4i_drv.c
+++ b/drivers/gpu/drm/sun4i/sun4i_drv.c
@@ -177,6 +177,13 @@
 	return of_device_is_compatible(node, "hdmi-connector");
 }
 
+static bool sun4i_drv_node_is_mipi_dsi(struct device_node *node)
+{
+	return of_device_is_compatible(node, "allwinner,sun8i-r40-mipi-dsi") ||
+		of_device_is_compatible(node, "allwinner,sun50i-a64-mipi-dsi") ||
+		of_device_is_compatible(node, "allwinner,sun6i-a31-mipi-dsi");
+}
+
 static bool sun4i_drv_node_is_frontend(struct device_node *node)
 {
 	return of_device_is_compatible(node, "allwinner,sun4i-a10-display-frontend") ||
@@ -346,6 +353,12 @@
 		return 0;
 
 	/*
+	 * MIPI-DSI will be the last nodes in our pipeline
+	 */
+	if (sun4i_drv_node_is_mipi_dsi(node))
+		return 0;
+
+	/*
 	 * If the device is either just a regular device, or an
 	 * enabled frontend supported by the driver, we add it to our
 	 * component list.
--- a/drivers/gpu/drm/sun4i/sun4i_drv.c
+++ b/drivers/gpu/drm/sun4i/sun4i_drv.c
@@ -112,6 +112,7 @@
 	}
 
 	drm_mode_config_init(drm);
+	// drm->mode_config.allow_fb_modifiers = true;
 
 	ret = component_bind_all(drm->dev, drm);
 	if (ret) {
--- a/drivers/gpu/drm/drm_probe_helper.c
+++ b/drivers/gpu/drm/drm_probe_helper.c
@@ -404,6 +404,8 @@
 
 	DRM_DEBUG_KMS("[CONNECTOR:%d:%s]\n", connector->base.id,
 			connector->name);
+	// using console args parsed to kernel to force connector on
+	// connector->force = DRM_FORCE_ON;
 
 retry:
 	ret = drm_modeset_lock(&dev->mode_config.connection_mutex, &ctx);
--- a/drivers/gpu/drm/sun4i/sun4i_rgb.c
+++ b/drivers/gpu/drm/sun4i/sun4i_rgb.c
@@ -222,7 +222,7 @@
 					 &sun4i_rgb_con_helper_funcs);
 		ret = drm_connector_init(drm, &rgb->connector,
 					 &sun4i_rgb_con_funcs,
-					 DRM_MODE_CONNECTOR_Unknown);
+					 DRM_MODE_CONNECTOR_LVDS);
 		if (ret) {
 			dev_err(drm->dev, "Couldn't initialise the rgb connector\n");
 			goto err_cleanup_connector;
