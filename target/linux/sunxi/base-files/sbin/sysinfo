#! /bin/sh

target=""

. /lib/functions.sh
. /lib/functions/tlink.sh

case "$(board_name)" in
"sipeed,lichee-zero-plus" | \
"kooiot,tlink-x1" | \
"kooiot,tlink-x1s" | \
"kooiot,tlink-x2" | \
"kooiot,tlink-k1" | \
"kooiot,tlink-s1" | \
"kooiot,tlink-ok-a40i" | \
"kooiot,tlink-dj-a40i-e" | \
"kooiot,tlink-dr4-a40i" | \
"kooiot,tlink-nano-a40i" | \
"kooiot,tlink-qh-x40" | \
"kooiot,tlink-m408" | \
"kooiot,tlink-r1")
    fm_version=$(cat /etc/build_version)
    ;;
*)
    fm_version=0.00
    ;;
esac

show_help(){
    cat <<EOF
sysinfo  [-h] <sw|psn|temp|hw|module|mac|all>

    -h          This help information
    sw          Software information
    hw          Hardware information
    temp        CPU temperature
    frq         CPU frequency
    psn         Product serial number
    module      The 2G or 4G module
    mac         The current MAC addresses
    all         All
EOF
}

parse_cmdline(){
    while getopts h  opt
    do
        case $opt in
            h)
                show_help
                exit 0
                ;;
        esac
    done

    shift $(($OPTIND - 1))

    if [ $# -eq 0 ]; then
        target="all"
    else
        case $1 in
            sw | \
            hw | \
            temp | \
            frq | \
            module | \
            mac | \
            psn | \
            sn | \
            all)
                target=$1
                ;;
            *)
                show_help
                exit 1
                ;;
        esac
    fi
}

product_sn_ex(){
	if [ -f /lib/functions/psn/parser.sh ] ; then
		. /lib/functions/psn/parser.sh
		product_sn_decode "$(product_sn)"
	else
		echo "$(product_sn)"
	fi
}

show_software_info(){ # software info
    local openwrt_distrib="unknown"
    local kernel_version=$(uname -a)

    if [ -r /etc/openwrt_release ]; then
        openwrt_distrib=$(sed -nE "s/^DISTRIB_RELEASE='([^']+)'.*/\1/p" /etc/openwrt_release 2> /dev/null)
    fi

    cat <<EOF
Software information:
  Firmware Version:  $fm_version
  Kernel Version:    ${kernel_version}
  OpenWRT Version:   ${openwrt_distrib}

EOF
}

show_thermal_info(){
    local readonly cpu_thermal_zone=/sys/class/thermal/thermal_zone0

    cat <<EOF
CPU temperature( Â°C X 1000 ):
  current:	$(cat ${cpu_thermal_zone}/temp)

EOF
}

show_cpu_frq_info(){
    local readonly cpu_freq_policy0=/sys/devices/system/cpu/cpufreq/policy0/

    cat <<EOF
CPU frequency(Hz):
  Current:  $(cat ${cpu_freq_policy0}/cpuinfo_cur_freq)
  Min:      $(cat ${cpu_freq_policy0}/cpuinfo_min_freq)
  Max:      $(cat ${cpu_freq_policy0}/cpuinfo_max_freq)

EOF
}

show_hardware_info(){
    local readonly sysfs_dir_cpuinfo="/sys/firmware/devicetree/base/cpus/cpu@0/compatible"
    local readonly sysfs_emmc_serial="/sys/class/block/mmcblk1/device/serial"

    cpu_hardware=$(sed 's/^Hardware[ \t]*:\ //g; t; /^.*$/d' /proc/cpuinfo 2> /dev/null)

    cat <<EOF
Hardware information:
  Board:        $(board_name)
  SN:           $(product_sn)
  PSN:          $(product_sn_ex)
  Modle:        $(cat /tmp/sysinfo/model)
  CPU Type:     $(cat ${sysfs_dir_cpuinfo})
  eMMC Serial:  $(cat ${sysfs_emmc_serial} 2>/dev/null)
EOF

    for i in /sys/class/net/eth*;
    do
        if [ -f ${i}/address ]; then
            echo "  MAC eth${i##/sys/class/net/eth}:     $(cat ${i}/address)"
        fi
    done    
    echo ""
}

show_psn_info(){
    cat <<EOF
  PSN:          $(product_sn_ex)
EOF
}

show_sn_info(){
    cat <<EOF
  SN:           $(product_sn)
EOF
}

show_module_info(){
    local module_type="UNKNOWN"
    local module_model="UNKNOWN"
    local module_imei="UNKNOWN"

	if [ -f "/tmp/sysinfo/3ginfo" ]; then
		# module_type="4G"
		module_type=$(3ginfo_get 'mode')
		module_model=$(3ginfo_get 'device')
		module_sim=$(3ginfo_get 'ccid')
		module_imei=$(3ginfo_get 'cgsn')
	fi

    cat <<EOF
2G/4G module info:
  Type:     ${module_type}
  Modle:    ${module_model}
  SIM:      ${module_sim}
  IMEI:     ${module_imei}

EOF
}

show_netdev_mac(){
    for i in /sys/class/net/eth*;
    do
        if [ -f ${i}/address ]; then
            echo "MAC eth${i##/sys/class/net/eth}:    $(cat ${i}/address)"
        fi
    done
	echo ""
}

show_sysinfo(){
    local tgt=$1

    case $tgt in
        "sw")
            show_software_info
            ;;
        "temp")
            show_thermal_info
            ;;
        "frq")
            show_cpu_frq_info
            ;;
        "hw")
            show_hardware_info
            ;;
        "module")
            show_module_info
            ;;
        "mac")
            show_netdev_mac
            ;;
        "psn")
            show_psn_info
            ;;
        "sn")
            show_sn_info
            ;;
        "all")
            show_software_info
            show_hardware_info
            show_module_info
            show_thermal_info
            show_cpu_frq_info
            ;;
    esac
}

parse_cmdline  $@
show_sysinfo   $target

