--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -1007,6 +1007,30 @@
		}
 
 		ret = phylink_connect_phy(priv->phylink, phydev);
 	}
+
+	if (ret == 0 && priv->plat->need_sun8i_ephy_hack)
+	{
+		struct phy_device* phydev = priv->dev->phydev;
+		netdev_info(priv->dev, "%s: H3 phy hacks begin\n", __func__);
+		//EPHY Initial
+		phy_write(phydev, 0x1f , 0x0100); /* switch to page 1        */
+		phy_write(phydev, 0x12 , 0x4824); /* Disable APS             */
+		phy_write(phydev, 0x1f , 0x0200); /* switchto page 2         */
+		phy_write(phydev, 0x18 , 0x0000); /* PHYAFE TRX optimization */
+		phy_write(phydev, 0x1f , 0x0600); /* switchto page 6         */
+		phy_write(phydev, 0x14 , 0x708F); /* PHYAFE TX optimization  */
+		phy_write(phydev, 0x19 , 0x0000);
+		phy_write(phydev, 0x13 , 0xf000); /* PHYAFE RX optimization  */
+		phy_write(phydev, 0x15 , 0x1530);
+		phy_write(phydev, 0x1f , 0x0800); /* switch to page 8         */
+		phy_write(phydev, 0x18 , 0x00bc); /* PHYAFE TRX optimization */
+		//disable iEEE
+		phy_write(phydev, 0x1f , 0x0100); /* switchto page 1 */
+		/* reg 0x17 bit3,set 0 to disable iEEE */
+		phy_write(phydev, 0x17 , phy_read(phydev, 0x17) & (~(1<<3)));
+		phy_write(phydev, 0x1f , 0x0000); /* switch to page 0 */
+		netdev_info(priv->dev, "%s: H3 phy hacks end\n", __func__);
+	}
 
 	return ret;
@@ -2821,9 +2845,14 @@
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
 	u32 chan;
+	int value = 0;
 
 	/* Stop and disconnect the PHY */
 	phylink_stop(priv->phylink);
+	if (priv->plat->need_sun8i_ephy_hack) {
+		// value = phy_read(dev->phydev, MII_BMCR);
+		// phy_write(dev->phydev, MII_BMCR, (value | BMCR_PDOWN));
+	}
 	phylink_disconnect_phy(priv->phylink);
 
 	stmmac_stop_all_queues(priv);
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -174,6 +174,7 @@
 	struct stmmac_axi *axi;
 	int has_gmac4;
 	bool has_sun8i;
+	bool need_sun8i_ephy_hack;
 	bool tso_en;
 	int rss_en;
 	int mac_port_sel_speed;
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac-sun8i.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac-sun8i.c
@@ -49,6 +49,7 @@
 	u32 default_syscon_value;
 	const struct reg_field *syscon_field;
 	bool soc_has_internal_phy;
+	bool soc_has_ephy_hack;
 	bool support_mii;
 	bool support_rmii;
 	bool support_rgmii;
@@ -97,6 +98,7 @@
 	.default_syscon_value = 0x58000,
 	.syscon_field = &sun8i_syscon_reg_field,
 	.soc_has_internal_phy = true,
+	.soc_has_ephy_hack = true,
 	.support_mii = true,
 	.support_rmii = true,
 	.support_rgmii = true,
@@ -1202,6 +1204,7 @@
 	plat_dat->rx_coe = STMMAC_RX_COE_TYPE2;
 	plat_dat->tx_coe = 1;
 	plat_dat->has_sun8i = true;
+	plat_dat->need_sun8i_ephy_hack = gmac->variant->soc_has_ephy_hack;
 	plat_dat->bsp_priv = gmac;
 	plat_dat->init = sun8i_dwmac_init;
 	plat_dat->exit = sun8i_dwmac_exit;
