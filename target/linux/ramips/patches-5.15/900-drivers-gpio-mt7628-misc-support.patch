--- a/drivers/gpio/Kconfig
+++ b/drivers/gpio/Kconfig
@@ -575,6 +575,13 @@
 	help
 	  Say yes here to support the Ralink SoC GPIO device
 
+config GPIO_MT7628_MISC
+	bool "MT7628 GPIO Misc Support"
+	depends on SOC_MT7620 || SOC_MT7621 || SOC_MT7628AN || SOC_MT7688
+	depends on OF_GPIO
+	help
+	  Say yes here to support the Ralink SoC MT7628 GPIO misc device
+
 config GPIO_SPEAR_SPICS
 	bool "ST SPEAr13xx SPI Chip Select as GPIO support"
 	depends on PLAT_SPEAR
--- a/drivers/gpio/Makefile
+++ b/drivers/gpio/Makefile
@@ -105,6 +105,7 @@
 obj-$(CONFIG_GPIO_MPC8XXX)		+= gpio-mpc8xxx.o
 obj-$(CONFIG_GPIO_MSIC)			+= gpio-msic.o
 obj-$(CONFIG_GPIO_MT7621)		+= gpio-mt7621.o
+obj-$(CONFIG_GPIO_MT7628_MISC)	+= gpio-mt7628-misc.o
 obj-$(CONFIG_GPIO_MVEBU)		+= gpio-mvebu.o
 obj-$(CONFIG_GPIO_MXC)			+= gpio-mxc.o
 obj-$(CONFIG_GPIO_MXS)			+= gpio-mxs.o
--- /dev/null
+++ b/drivers/gpio/gpio-mt7628-misc.c
@@ -0,0 +1,356 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * MT7628 GPIO MISC (netmode switch)
+ *
+ * Copyright (C) 2020 Dirk <dirk@kooiot.com>
+ */
+ /*
+	/*
+	agpio: agpio {
+		compatible = "ralink,mt7628-gpio-misc";
+		#gpio-cells = <2>;
+		gpio-controller;
+
+		reg = <0x3c 0x4>;
+
+		named-gpio-pins;
+
+		chip-name = "AGPIO";
+		nr-gpios = <1>;
+		reg-base = <0x3c>;
+		ralink,offset-map = [ 11 ];
+		ralink,size-map = [ 04 ];
+	};
+	mgpio: mgpio {
+		compatible = "ralink,mt7628-gpio-misc";
+		#gpio-cells = <2>;
+		gpio-controller;
+
+		reg = <0x64 0x4>;
+
+		chip-name = "MGPIO";
+		nr-gpios = <1>;
+		reg-base = <0x64>;
+		ralink,offset-map = [ 04 ];
+		ralink,size-map = [ 08 ];
+	};
+ */
+ /*
+	agpio: agpio {
+		compatible = "ralink,mt7628-gpio-misc";
+		#gpio-cells = <2>;
+		gpio-controller;
+
+		reg = <0x3c 0x4>;
+
+		named-gpio-pins;
+
+		chip-name = "AGPIO";
+		nr-gpios = <4>;
+		reg-base = <0x3c>;
+		ralink,offset-map = [ 11 12 13 14 ];
+		ralink,size-map = [ 01 01 01 01 ];
+	};
+	mgpio: mgpio {
+		compatible = "ralink,mt7628-gpio-misc";
+		#gpio-cells = <2>;
+		gpio-controller;
+
+		reg = <0x64 0x4>;
+
+		chip-name = "MGPIO";
+		nr-gpios = <4>;
+		reg-base = <0x64>;
+		ralink,offset-map = [ 04 06 08 0a ];
+		ralink,size-map = [ 02 02 02 02 ];
+	};
+ */
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/gpio/driver.h>
+#include <linux/gpio/consumer.h>
+#include <linux/platform_device.h>
+#include <linux/slab.h>
+#include <linux/uaccess.h>
+#include <linux/property.h>
+
+#include <asm/mach-ralink/ralink_regs.h>
+
+#include "gpiolib.h"
+
+#define DRV_NAME	"mt7628-gpio-misc"
+
+enum {
+	GPIO_MISC_DIR_IN = 0,
+	GPIO_MISC_DIR_OUT = 1,
+};
+
+/*
+ * struct gpio_misc_pin_status - structure describing a GPIO status
+ * @dir:       Configures direction of gpio as "in" or "out", 0=in, 1=out
+ * @value:     Configures status of the gpio as 0(low) or 1(high)
+ */
+struct gpio_misc_pin_status {
+	int dir;
+	union {
+		struct sysc_t {
+			u32 reg;
+			u8 offset;
+			u8 size;
+		} sysc;
+	}
+};
+
+struct gpio_misc_chip {
+	struct gpio_chip gc;
+	struct gpio_misc_pin_status *pins;
+	struct mutex lock;
+};
+
+static int __gpio_misc_get(struct gpio_misc_chip *chip,
+			     unsigned int offset)
+{
+	u32 reg = chip->pins[offset].sysc.reg;
+	u8 _offset = chip->pins[offset].sysc.offset;
+	u8 size = chip->pins[offset].sysc.size;
+	u32 mask = GENMASK(size + _offset, _offset);
+
+	pr_info("%s: address:%d\toffset:%d\tsize:%d\tmask:%d\n", __func__, reg, _offset, size, mask);
+
+	return rt_sysc_r32(reg) & mask;
+}
+
+static int gpio_misc_get(struct gpio_chip *gc, unsigned int offset)
+{
+	struct gpio_misc_chip *chip = gpiochip_get_data(gc);
+	int val;
+
+	mutex_lock(&chip->lock);
+	val = __gpio_misc_get(chip, offset);
+	mutex_unlock(&chip->lock);
+
+	return val;
+}
+
+static void __gpio_misc_set(struct gpio_misc_chip *chip,
+			      unsigned int offset, int value)
+{
+	u32 reg = chip->pins[offset].sysc.reg;
+	u8 _offset = chip->pins[offset].sysc.offset;
+	u8 size = chip->pins[offset].sysc.size;
+	u32 mask = GENMASK(size + _offset, _offset);
+
+	pr_info("%s: address:%d\toffset:%d\tsize:%d\tmask:%d\n", __func__, reg, _offset, size, mask);
+
+	return rt_sysc_m32(mask, value << _offset, reg);
+}
+
+static void gpio_misc_set(struct gpio_chip *gc,
+			   unsigned int offset, int value)
+{
+	struct gpio_misc_chip *chip = gpiochip_get_data(gc);
+
+	mutex_lock(&chip->lock);
+	__gpio_misc_set(chip, offset, value);
+	mutex_unlock(&chip->lock);
+}
+
+static int gpio_misc_dirout(struct gpio_chip *gc,
+			      unsigned int offset, int value)
+{
+	struct gpio_misc_chip *chip = gpiochip_get_data(gc);
+
+	mutex_lock(&chip->lock);
+	chip->pins[offset].dir = GPIO_MISC_DIR_OUT;
+	__gpio_misc_set(chip, offset, value);
+	mutex_unlock(&chip->lock);
+
+	return 0;
+}
+
+static int gpio_misc_dirin(struct gpio_chip *gc, unsigned int offset)
+{
+	struct gpio_misc_chip *chip = gpiochip_get_data(gc);
+
+	mutex_lock(&chip->lock);
+	chip->pins[offset].dir = GPIO_MISC_DIR_IN;
+	mutex_unlock(&chip->lock);
+
+	return 0;
+}
+
+static int gpio_misc_get_direction(struct gpio_chip *gc, unsigned int offset)
+{
+	struct gpio_misc_chip *chip = gpiochip_get_data(gc);
+	int direction;
+
+	mutex_lock(&chip->lock);
+	direction = !chip->pins[offset].dir;
+	mutex_unlock(&chip->lock);
+
+	return direction;
+}
+
+static int gpio_misc_name_pins(struct device *dev,
+				  struct gpio_misc_chip *chip)
+{
+	struct gpio_chip *gc = &chip->gc;
+	char **names;
+	int i;
+
+	names = devm_kcalloc(dev, gc->ngpio, sizeof(char *), GFP_KERNEL);
+	if (!names)
+		return -ENOMEM;
+
+	for (i = 0; i < gc->ngpio; i++) {
+		names[i] = devm_kasprintf(dev, GFP_KERNEL,
+					  "%s-%d", gc->label, i);
+		if (!names[i])
+			return -ENOMEM;
+	}
+
+	gc->names = (const char *const *)names;
+
+	return 0;
+}
+
+static int gpio_misc_init_pins(struct gpio_misc_chip *chip,
+		u32 reg, u8* offset, u8* size)
+{
+	struct gpio_chip *gc = &chip->gc;
+	int i;
+	for (i = 0; i < gc->ngpio; i++) {
+		chip->pins[i].sysc.reg = reg;
+		chip->pins[i].sysc.offset = offset[i];
+		chip->pins[i].sysc.size = size[i];
+	}
+
+	return 0;
+}
+
+static int gpio_misc_probe(struct platform_device *pdev)
+{
+	struct gpio_misc_chip *chip;
+	struct gpio_chip *gc;
+	struct device *dev;
+	const char *name;
+	int rv, base;
+	u32 ngpio;
+	u32 reg_base;
+	u8 *offset_map;
+	u8 *size_map;
+
+	dev = &pdev->dev;
+
+	rv = device_property_read_u32(dev, "gpio-base", &base);
+	if (rv)
+		base = -1;
+
+	rv = device_property_read_u32(dev, "nr-gpios", &ngpio);
+	if (rv)
+		return rv;
+
+	offset_map = devm_kcalloc(dev, ngpio, sizeof(u8), GFP_KERNEL);
+	if (!offset_map)
+		return -ENOMEM;
+
+	size_map = devm_kcalloc(dev, ngpio, sizeof(u8), GFP_KERNEL);
+	if (!size_map)
+		return -ENOMEM;
+
+	rv = device_property_read_u32(dev, "reg-base", &reg_base);
+	if (rv) {
+		dev_err(&pdev->dev, "failed to read register base address\n");
+		return -EINVAL;
+	}
+
+	rv = device_property_read_string(dev, "chip-name", &name);
+	if (rv)
+		name = NULL;
+
+	if (device_property_read_u8_array(dev, "ralink,offset-map",
+			offset_map, ngpio)) {
+		dev_err(&pdev->dev, "failed to read offset definition\n");
+		return -EINVAL;
+	}
+
+	if (device_property_read_u8_array(dev, "ralink,size-map",
+			size_map, ngpio)) {
+		dev_err(&pdev->dev, "failed to read size definition\n");
+		return -EINVAL;
+	}
+
+	chip = devm_kzalloc(dev, sizeof(*chip), GFP_KERNEL);
+	if (!chip)
+		return -ENOMEM;
+
+	if (!name) {
+		name = devm_kasprintf(dev, GFP_KERNEL,
+				      "%s-%c", pdev->name, pdev->id + 'A');
+		if (!name)
+			return -ENOMEM;
+	}
+
+	mutex_init(&chip->lock);
+
+	gc = &chip->gc;
+	gc->base = base;
+	gc->ngpio = ngpio;
+	gc->label = name;
+	gc->owner = THIS_MODULE;
+	gc->parent = dev;
+	gc->get = gpio_misc_get;
+	gc->set = gpio_misc_set;
+	gc->direction_output = gpio_misc_dirout;
+	gc->direction_input = gpio_misc_dirin;
+	gc->get_direction = gpio_misc_get_direction;
+
+	chip->pins = devm_kcalloc(dev, gc->ngpio,
+				   sizeof(*chip->pins), GFP_KERNEL);
+	if (!chip->pins)
+		return -ENOMEM;
+
+	if (device_property_read_bool(dev, "named-gpio-pins")) {
+		rv = gpio_misc_name_pins(dev, chip);
+		if (rv)
+			return rv;
+	}
+
+	gpio_misc_init_pins(chip, reg_base, offset_map, size_map);
+
+	rv = devm_gpiochip_add_data(dev, &chip->gc, chip);
+	if (rv)
+		return rv;
+
+	return 0;
+}
+
+static const struct platform_device_id gpio_misc_id_table[] = {
+	{ .name	= DRV_NAME, },
+	{}
+};
+MODULE_DEVICE_TABLE(platform, gpio_misc_id_table);
+
+#ifdef CONFIG_OF
+static const struct of_device_id gpio_misc_of_match[] = {
+	{ .compatible = "ralink," DRV_NAME },
+	{}
+};
+MODULE_DEVICE_TABLE(of, gpio_misc_of_match);
+#endif /* CONFIG_OF */
+
+static struct platform_driver gpio_misc_driver = {
+	.driver = {
+		.name = DRV_NAME,
+		.of_match_table = of_match_ptr(gpio_misc_of_match),
+	},
+	.id_table = gpio_misc_id_table,
+	.probe = gpio_misc_probe,
+};
+
+module_platform_driver(gpio_misc_driver);
+
+MODULE_AUTHOR("Dirk Chang <dirk@kooiot.com>");
+MODULE_DESCRIPTION("MT7628 GPIO MISC driver");
+MODULE_LICENSE("GPL v2");
