--- a/drivers/nvmem/Kconfig
+++ b/drivers/nvmem/Kconfig
@@ -171,6 +171,16 @@
 	  This driver enable the OTP controller available on Microchip SAMA7G5
 	  SoCs. It controls the access to the OTP memory connected to it.

+config NVMEM_MT76X8_SYSC
+	tristate "Ralink MT76X8 sysc register r/w support"
+	depends on SOC_MT7620 || SOC_MT7628AN || SOC_MT7688
+	help
+	  This is a driver for the 'sysc' registers on various Ralink MT76X8
+	  devices.
+
+	  This driver can also be built as a module. If so, the module
+	  will be called nvmem_mt76x8_sysc.
+
 config NVMEM_MTK_EFUSE
 	tristate "Mediatek SoCs EFUSE support"
 	depends on ARCH_MEDIATEK || COMPILE_TEST
--- a/drivers/nvmem/Makefile
+++ b/drivers/nvmem/Makefile
@@ -36,6 +36,8 @@
 nvmem_meson_mx_efuse-y			:= meson-mx-efuse.o
 obj-$(CONFIG_NVMEM_MICROCHIP_OTPC)	+= nvmem-microchip-otpc.o
 nvmem-microchip-otpc-y			:= microchip-otpc.o
+obj-$(CONFIG_NVMEM_MT76X8_SYSC) += nvmem_mt76x8_sysc.o
+nvmem_mt76x8_sysc-y		:= mt76x8_sysc.o
 obj-$(CONFIG_NVMEM_MTK_EFUSE)		+= nvmem_mtk-efuse.o
 nvmem_mtk-efuse-y			:= mtk-efuse.o
 obj-$(CONFIG_NVMEM_MXS_OCOTP)		+= nvmem-mxs-ocotp.o
--- /dev/null
+++ b/drivers/nvmem/mt76x8_sysc.c
@@ -0,0 +1,294 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Ralink MT76X8 sysc registers rw support.
+ *
+ * Copyright (C) 2020 Dirk Chang <dirk@kooiot.com>
+ */
+
+#include <linux/device.h>
+#include <linux/io.h>
+#include <linux/iopoll.h>
+#include <linux/module.h>
+#include <linux/nvmem-provider.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/platform_device.h>
+#include <linux/slab.h>
+#include <linux/random.h>
+
+#include <asm/mach-ralink/ralink_regs.h>
+
+struct mt76x8_sysc {
+	struct device		*dev;
+	struct device_node	*np;
+	struct nvmem_device	*nvmem;
+};
+
+static DEFINE_MUTEX(mt76x8_sysc_mutex);
+
+static int mt76x8_sysc_register_readout(const struct mt76x8_sysc *sysc,
+				      const unsigned int offset,
+				      u32 *out)
+{
+	*out = rt_sysc_r32(offset);
+
+	return 0;
+}
+
+/*
+ * Read by the registers one by one
+ */
+static int mt76x8_sysc_read_by_reg(void *context, unsigned int offset,
+				 void *val, size_t bytes)
+{
+	struct mt76x8_sysc *sysc = context;
+	u32 word;
+	int ret;
+
+	mutex_lock(&mt76x8_sysc_mutex);
+
+	/* .stride = 4 so offset is guaranteed to be aligned */
+	while (bytes >= 4) {
+		ret = mt76x8_sysc_register_readout(sysc, offset, val);
+		if (ret) {
+			mutex_unlock(&mt76x8_sysc_mutex);
+			return ret;
+		}
+
+		val += 4;
+		offset += 4;
+		bytes -= 4;
+	}
+
+	if (!bytes) {
+		mutex_unlock(&mt76x8_sysc_mutex);
+		return 0;
+	}
+
+	/* Handle any trailing bytes */
+	ret = mt76x8_sysc_register_readout(sysc, offset, &word);
+	if (ret) {
+		mutex_unlock(&mt76x8_sysc_mutex);
+		return ret;
+	}
+
+	mutex_unlock(&mt76x8_sysc_mutex);
+
+	memcpy(val, &word, bytes);
+
+	return 0;
+}
+
+static int mt76x8_sysc_register_writeout(const struct mt76x8_sysc *sysc,
+				      const unsigned int offset,
+				      u32 val)
+{
+	rt_sysc_w32(val, offset);
+
+	return 0;
+}
+
+static int mt76x8_cell_write_check(struct mt76x8_sysc *sysc, const char *name,
+						u32 cell_offset, u32 cell_bytes,
+						u32 bit_offset, u32 nbits,
+						unsigned int offset, size_t bytes)
+{
+	/*
+	dev_info(sysc->dev, "%s: writable check cell:%s\n", __func__, name);
+	dev_info(sysc->dev, "%s: cell_offset:%X\tcell_bytes:%d\n",
+			__func__, cell_offset, cell_bytes);
+	dev_info(sysc->dev, "%s: bit_offset:%X\tbits:%d\n",
+			__func__, bit_offset, nbits);
+	dev_info(sysc->dev, "%s: offset:%X\tbytes:%d\n",
+			__func__, offset, bytes);
+	*/
+
+	/* basic range checking */
+	if (cell_offset > offset ||
+		(cell_offset + cell_bytes) > (offset + bytes)) {
+		dev_err(sysc->dev, "%s: out of range. cell:%s\n",
+				__func__, name);
+		return -EINVAL;
+	}
+
+	if (bit_offset == 0 && nbits == 0) {
+		if ((offset + bytes) > (cell_offset + cell_bytes)) {
+			dev_err(sysc->dev, "%s: out of range (nbits). cell:%s\n",
+					__func__, name);
+			return -EINVAL;
+		}
+
+		dev_info(sysc->dev, "%s: writable  cell:%s\n", __func__, name);
+		return 0;
+	}
+
+	if ((offset + bytes) > (cell_offset + DIV_ROUND_UP(nbits, BITS_PER_BYTE))) {
+		dev_err(sysc->dev, "%s: out of range (nbits). cell:%s\n",
+				__func__, name);
+		return -EINVAL;
+	}
+
+	dev_info(sysc->dev, "%s: writable  cell:%s\n", __func__, name);
+
+	return 0;
+}
+
+static int mt76x8_write_check(struct mt76x8_sysc *sysc,
+				unsigned int offset, size_t bytes)
+{
+	struct device_node *parent, *child, *cell;
+	u32 cell_offset, cell_bytes, bit_offset, nbits;
+	const __be32 *addr;
+	const char* name;
+	int len;
+
+	parent = sysc->np;
+	cell = NULL;
+
+	for_each_child_of_node(parent, child) {
+		name = kasprintf(GFP_KERNEL, "%pOFn", child);
+
+		addr = of_get_property(child, "reg", &len);
+		if (!addr || (len < 2 * sizeof(u32))) {
+			dev_err(sysc->dev, "nvmem: invalid reg on %pOF\n", child);
+			return -EINVAL;
+		}
+
+		cell_offset = be32_to_cpup(addr++);
+		cell_bytes = be32_to_cpup(addr);
+
+		addr = of_get_property(child, "bits", &len);
+		if (addr && len == (2 * sizeof(u32))) {
+			bit_offset = be32_to_cpup(addr++);
+			nbits = be32_to_cpup(addr);
+		} else {
+			bit_offset = 0;
+			nbits = 0;
+		}
+		if (0 == mt76x8_cell_write_check(sysc, name,
+					cell_offset, cell_bytes, bit_offset,
+					nbits, offset, bytes)) {
+			cell = of_node_get(child);
+			break;
+		}
+	}
+
+	if (!cell)
+		return -EINVAL;
+
+	return 0;
+}
+
+
+/*
+ *  by the registers one by one
+ */
+
+static int mt76x8_sysc_write_by_reg(void *context, unsigned int offset,
+				 void *val, size_t bytes)
+{
+	struct mt76x8_sysc *sysc = context;
+	u32 *_val = val;
+	int ret;
+
+	if(!sysc->nvmem || !sysc->dev) {
+		dev_err(sysc->dev, "%s: ERROR!!!!! %ld %ld\n", __func__, sysc->nvmem, sysc->dev);
+		return -EINVAL;
+	}
+
+	/* allow only writing one complete word at a time */
+	if ((bytes != 4) || (offset % 4)) {
+		dev_err(sysc->dev,
+			"Invalid write request\t bytes: %d\t offset: %X\n",
+			bytes, offset);
+		return -EINVAL;
+	}
+
+	ret = mt76x8_write_check(sysc, offset, bytes);
+	if (ret)
+		return ret;
+
+	mutex_lock(&mt76x8_sysc_mutex);
+
+	ret = mt76x8_sysc_register_writeout(sysc, offset & ~0x03, *_val);
+
+	mutex_unlock(&mt76x8_sysc_mutex);
+
+	return ret;
+}
+
+static int mt76x8_sysc_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct nvmem_config *nvmem_cfg;
+	struct nvmem_device *nvmem;
+	struct mt76x8_sysc *sysc;
+	u32 size;
+	int read_only;
+	char *randomness;
+	int rc;
+
+	sysc = devm_kzalloc(dev, sizeof(*sysc), GFP_KERNEL);
+	if (!sysc)
+		return -ENOMEM;
+
+	sysc->np = dev->of_node;
+	sysc->dev = dev;
+
+	rc = device_property_read_u32(dev, "ralink,nvmem-size", &size);
+
+	read_only = !of_property_read_bool(dev->of_node, "ralink,nvmem-writable");
+
+	nvmem_cfg = devm_kzalloc(dev, sizeof(*nvmem_cfg), GFP_KERNEL);
+	if (!nvmem_cfg)
+		return -ENOMEM;
+
+	nvmem_cfg->dev = dev;
+	nvmem_cfg->name = "mt76x8-sysc";
+	nvmem_cfg->read_only = read_only;
+	nvmem_cfg->root_only = true;
+	nvmem_cfg->size = size;
+	nvmem_cfg->word_size = 1;
+	nvmem_cfg->stride = 4;
+	nvmem_cfg->priv = sysc;
+	nvmem_cfg->reg_read = mt76x8_sysc_read_by_reg;
+	nvmem_cfg->reg_write = mt76x8_sysc_write_by_reg;
+
+	nvmem = devm_nvmem_register(dev, nvmem_cfg);
+	if (IS_ERR(nvmem))
+		return PTR_ERR(nvmem);
+
+	sysc->nvmem = nvmem;
+
+	randomness = kzalloc(size, GFP_KERNEL);
+	if (!randomness)
+		return -ENOMEM;
+
+	nvmem_cfg->reg_read(sysc, 0, randomness, size);
+	add_device_randomness(randomness, size);
+	kfree(randomness);
+
+	platform_set_drvdata(pdev, nvmem);
+
+	return 0;
+}
+
+static const struct of_device_id mt76x8_sysc_of_match[] = {
+	{ .compatible = "ralink,nvmem-mt7628-sysc", },
+	{ .compatible = "ralink,nvmem-mt7688-sysc", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, mt76x8_sysc_of_match);
+
+static struct platform_driver mt76x8_sysc_driver = {
+	.probe = mt76x8_sysc_probe,
+	.driver = {
+		.name = "nvmem-mt76x8-sysc",
+		.of_match_table = mt76x8_sysc_of_match,
+	},
+};
+module_platform_driver(mt76x8_sysc_driver);
+
+MODULE_AUTHOR("Dirk Chang <dirk@kooiot.com>");
+MODULE_DESCRIPTION("Ralink MT76X8 sysc regiters r/w driver");
+MODULE_LICENSE("GPL");
