From 800653f2e830885b824ec48de49a5eb42e1eb9ab Mon Sep 17 00:00:00 2001
From: GP Orcullo <kinsamanka@gmail.com>
Date: Sat, 4 Nov 2023 13:09:27 +0000
Subject: [PATCH] reset: sophgo: Add reset controller support for Sophgo CV1800B SoC.

extracted from OEM supplied sources.

Upstream-Status: Pending
Signed-off-by: GP Orcullo <kinsamanka@gmail.com>
---
 arch/riscv/boot/dts/sophgo/cv18xx.dtsi |   5 ++
 drivers/power/reset/Kconfig            |   6 ++
 drivers/power/reset/Makefile           |   1 +
 drivers/power/reset/sophgo-reboot.c    | 108 +++++++++++++++++++++++++
 4 files changed, 120 insertions(+)
 create mode 100644 drivers/power/reset/sophgo-reboot.c

diff --git a/arch/riscv/boot/dts/sophgo/cv18xx.dtsi b/arch/riscv/boot/dts/sophgo/cv18xx.dtsi
index 67f45abd4..0812e87b3 100644
--- a/arch/riscv/boot/dts/sophgo/cv18xx.dtsi
+++ b/arch/riscv/boot/dts/sophgo/cv18xx.dtsi
@@ -325,5 +325,10 @@ clint: timer@74000000 {
 			reg = <0x74000000 0x10000>;
 			interrupts-extended = <&cpu0_intc 3>, <&cpu0_intc 7>;
 		};
+
+		restart: restart-controller@5025000 {
+			compatible = "sophgo,restart";
+			reg = <0x05025000 0x2000>;
+		};
 	};
 };
diff --git a/drivers/power/reset/Kconfig b/drivers/power/reset/Kconfig
index fece990af..134a89318 100644
--- a/drivers/power/reset/Kconfig
+++ b/drivers/power/reset/Kconfig
@@ -199,6 +199,12 @@ config POWER_RESET_RESTART
 	  Instead they restart, and u-boot holds the SoC until the
 	  user presses a key. u-boot then boots into Linux.
 
+config POWER_RESET_SOPHGO
+	bool "SOPHGO power-off driver"
+	depends on ARCH_SOPHGO
+	help
+	  Power off and restart support for SOPHGO boards.
+
 config POWER_RESET_ST
 	bool "ST restart driver"
 	depends on ARCH_STI
diff --git a/drivers/power/reset/Makefile b/drivers/power/reset/Makefile
index a95d1bd27..a65266f2e 100644
--- a/drivers/power/reset/Makefile
+++ b/drivers/power/reset/Makefile
@@ -36,3 +36,4 @@ obj-$(CONFIG_SYSCON_REBOOT_MODE) += syscon-reboot-mode.o
 obj-$(CONFIG_POWER_RESET_SC27XX) += sc27xx-poweroff.o
 obj-$(CONFIG_NVMEM_REBOOT_MODE) += nvmem-reboot-mode.o
 obj-$(CONFIG_POWER_MLXBF) += pwr-mlxbf.o
+obj-$(CONFIG_POWER_RESET_SOPHGO) += sophgo-reboot.o
diff --git a/drivers/power/reset/sophgo-reboot.c b/drivers/power/reset/sophgo-reboot.c
new file mode 100644
index 000000000..17b828a15
--- /dev/null
+++ b/drivers/power/reset/sophgo-reboot.c
@@ -0,0 +1,108 @@
+// SPDX-License-Identifier: GPL-2.0-only
+
+#include <linux/delay.h>
+#include <linux/io.h>
+#include <linux/module.h>
+#include <linux/notifier.h>
+#include <linux/of_address.h>
+#include <linux/platform_device.h>
+#include <linux/reboot.h>
+
+#define RTC_CTRL0_UNLOCKKEY		0x4
+#define RTC_CTRL0			0x8
+#define RTC_EN_SHDN_REQ			0xC0
+#define RTC_EN_WARM_RST_REQ		0xCC
+#define RTC_EN_SUSPEND_REQ		0xE4
+#define RSM_STATE			0xD4
+#define ST_ON				0x3
+
+static void __iomem *base;
+
+static int sophgo_restart_handler(struct notifier_block *this,
+				unsigned long mode, void *cmd)
+{
+	void __iomem *REG_RTC_CTRL_BASE = base;
+	void __iomem *REG_RTC_BASE = base + 0x1000;
+
+	/* Enable power suspend wakeup source mask */
+	writel(0x1, REG_RTC_BASE + 0x3C); // 1 = select prdata from 32K domain
+
+	writel(0xAB18, REG_RTC_CTRL_BASE + RTC_CTRL0_UNLOCKKEY);
+
+	writel(0x1, REG_RTC_BASE + RTC_EN_WARM_RST_REQ);
+
+	while (readl(REG_RTC_BASE + RTC_EN_WARM_RST_REQ) != 0x01)
+		;
+
+	while (readl(REG_RTC_BASE + RSM_STATE) != ST_ON)
+		;
+
+	writel(0xFFFF0800 | (0x1 << 4), REG_RTC_CTRL_BASE + RTC_CTRL0);
+
+	return NOTIFY_DONE;
+}
+
+static void sophgo_do_pwroff(void)
+{
+	void __iomem *REG_RTC_CTRL_BASE = base;
+	void __iomem *REG_RTC_BASE = base + 0x1000;
+
+	/* Enable power suspend wakeup source mask */
+	writel(0x1, REG_RTC_BASE + 0x3C); // 1 = select prdata from 32K domain
+
+	writel(0xAB18, REG_RTC_CTRL_BASE + RTC_CTRL0_UNLOCKKEY);
+
+	writel(0x1, REG_RTC_BASE + RTC_EN_SHDN_REQ);
+
+	while (readl(REG_RTC_BASE + RTC_EN_SHDN_REQ) != 0x01)
+		;
+
+	writel(0xFFFF0800 | (0x1 << 0), REG_RTC_CTRL_BASE + RTC_CTRL0);
+
+	/* Wait some time until system down, otherwise, notice with a warn */
+	mdelay(1000);
+
+	WARN_ONCE(1, "Unable to power off system\n");
+}
+
+static struct notifier_block sophgo_restart_nb = {
+	.notifier_call = sophgo_restart_handler,
+	.priority = 128,
+};
+
+static int sophgo_reboot_probe(struct platform_device *pdev)
+{
+	struct device_node *np = pdev->dev.of_node;
+	int err;
+
+	base = of_iomap(np, 0);
+	if (!base) {
+		WARN(1, "failed to map base address");
+		return -ENODEV;
+	}
+
+	err = register_restart_handler(&sophgo_restart_nb);
+	if (err) {
+		dev_err(&pdev->dev, "cannot register restart handler (err=%d)\n",
+			err);
+		iounmap(base);
+	}
+
+	pm_power_off = &sophgo_do_pwroff;
+
+	return err;
+}
+
+static const struct of_device_id sophgo_reboot_of_match[] = {
+	{ .compatible = "sophgo,restart" },
+	{}
+};
+
+static struct platform_driver sophgo_reboot_driver = {
+	.probe = sophgo_reboot_probe,
+	.driver = {
+		.name = "sophgo-reboot",
+		.of_match_table = sophgo_reboot_of_match,
+	},
+};
+module_platform_driver(sophgo_reboot_driver);
-- 
2.39.5

