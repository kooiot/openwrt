--- a/drivers/rtc/rtc-sd3078.c
+++ b/drivers/rtc/rtc-sd3078.c
@@ -39,6 +39,7 @@
 struct sd3078 {
 	struct rtc_device	*rtc;
 	struct regmap		*regmap;
+	int					rtcf;
 };
 
 /*
@@ -88,6 +89,10 @@
 	struct sd3078 *sd3078 = i2c_get_clientdata(client);
 	int ret;
 
+	if (sd3078->rtcf) {
+		return 0;
+	}
+
 	ret = regmap_bulk_read(sd3078->regmap, SD3078_REG_SC, rtc_data,
 			       NUM_TIME_REGS);
 	if (ret < 0) {
@@ -136,6 +141,12 @@
 
 #if WRITE_PROTECT_EN
 	sd3078_enable_reg_write(sd3078);
+#else
+	if (sd3078->rtcf) {
+		// Make sure write is enable when probe
+		sd3078_enable_reg_write(sd3078);
+		sd3078->rtcf = 0;
+	}
 #endif
 
 	ret = regmap_bulk_write(sd3078->regmap, SD3078_REG_SC, rtc_data,
@@ -166,6 +177,7 @@
 static int sd3078_probe(struct i2c_client *client,
 			const struct i2c_device_id *id)
 {
+	unsigned int ctrl;
 	int ret;
 	struct sd3078 *sd3078;
 
@@ -182,6 +194,19 @@
 		return PTR_ERR(sd3078->regmap);
 	}
 
+	ret = regmap_read(sd3078->regmap, SD3078_REG_CTRL1, &ctrl);
+	if (ret < 0) {
+		dev_err(&client->dev, "reading CTRL1 from RTC failed with err:%d\n", ret);
+		return ret;
+	}
+
+	sd3078->rtcf = ctrl & 0x01;
+	if (sd3078->rtcf) {
+		dev_err(&client->dev, "%s: RTC power lost CTRL1:%X\n", __func__, ctrl);
+	} else {
+		dev_info(&client->dev, "%s: CTRL1 is %X\n", __func__, ctrl);
+	}
+
 	i2c_set_clientdata(client, sd3078);
 
 	sd3078->rtc = devm_rtc_allocate_device(&client->dev);
@@ -196,7 +221,10 @@
 	if (ret)
 		return ret;
 
-	sd3078_enable_reg_write(sd3078);
+	if (!sd3078->rtcf) {
+		// Make sure write is enable when probe
+		sd3078_enable_reg_write(sd3078);
+	}
 
 	return 0;
 }
